---
stages:
- name: Build
  inputs:
  - type: git
    branch: master
    service: ${SAMPLE_REPO}
    dir_name: null
  triggers:
  - type: commit
  jobs:
  - name: Build
    type: builder
    artifact_dir: ''
    build_type: npm
    script: |-
      export PATH=/opt/IBM/node-v4.2/bin:$PATH

      npm install
      npm install -g bower
      bower install
      npm install -g grunt-cli

      grunt build

      tar -czf node_modules.tar.gz node_modules
      rm -rf node_modules
- name: Run Unit Test
  inputs:
  - type: job
    stage: Build
    job: Build
    dir_name: null
  triggers:
  - type: stage
  jobs:
  - name: Linting and Unit Tests
    type: tester
    script: |-
      #!/bin/bash

      tar -xzf node_modules.tar.gz

      grunt test:dist
    enable_tests: true
    test_file_pattern: tests/reports/unit-tests.xml
- name: Active Deploy
  inputs:
  - type: job
    stage: Build
    job: Build
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: NAME
    value: ''
    type: text
  - name: GROUP_SIZE
    value: '1'
    type: text
  - name: APP_NAME
    value: ''
    type: text
  jobs:
  - name: Deploy Single Instance
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME}
    script: |
      #!/bin/bash
      NAME="${CF_APP}_${BUILD_NUMBER}"
      cf push "${NAME}" --no-route -i 1 -m 64M
      export NAME
  - name: Begin Active Deploy
    type: deployer
    extension_id: ibm.devops.services.pipeline.devops.ad_start
    target:
      region_id: ibm:yp:us-south
      organization: ACIT Org
      space: dev
    DEPLOYMENT_METHOD: Red Black
    RAMPDOWN_DURATION: 30m
    RAMPUP_DURATION: 30m
    COMMAND: |-
      #!/bin/bash
      #
      # The following code uses the Active Deploy service to update your new application with zero downtime.
      # The code used is available at https://github.com/Osthanes/update_service
      # and https://github.com/Osthanes/activedeploy_common.
      #
      # For details about how to set up the Active Deploy extension for the Delivery Pipeline, see
      # https://console.ng.bluemix.net/docs/services/ActiveDeploy/updatingapps.html#adpipeline.
      #
      # Feel free to fork the code. After creating your fork, define the environment variable GIT_HOME to use the forked repositories with the
      # format https://github.com/${GIT_HOME}/update_service and https://github.com/${GIT_HOME}/activedeploy_common.
      #
      # Make sure the following variables are defined as environment properties with no values:
      # NAME: The name of your new application. This variable has to be exported in the first deploy job.
      # TEST_RESULT_FOR_AD: Passes the results of the test phase to the Active Deploy - Complete job. Set this variable in the test job.
      #
      # The following variables may be defined as environment properties:
      # GROUP_SIZE: The number of instances that are created during initial deployment. The default value is 1.
      # CONCURRENT_VERSIONS: The number of application versions to keep at the end of deployment. The default value is 2.
      # AD_INSTANCE_NAME: The name for Active Deploy Instance, if it does not yet exist. The default value is activedeploy-for-pipeline.

      source ${EXT_DIR}/git_util.sh
      git_retry clone https://github.com/Osthanes/update_service.git activedeploy
      activedeploy/activedeploy_step_1.sh
  - name: '*Disabled* End-to-end Tests'
    type: tester
    script: |-
      #!/bin/bash
      # Supposed to be end-to-end testing through Saucelabs, but not configured and therefore disabled.
      # Must be configured as module in Toolchain, and selected.
  - name: Complete Active Deploy
    type: deployer
    extension_id: ibm.devops.services.pipeline.devops.ad_finish
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME}
    COMMAND: |-
      #!/bin/bash
      #
      # The following code uses the Active Deploy service to update your new application with zero downtime.
      # The code used is available at https://github.com/Osthanes/update_service
      # and https://github.com/Osthanes/activedeploy_common.
      #
      # For details about how to set up the Active Deploy extension for the Delivery Pipeline, see
      # https://console.ng.bluemix.net/docs/services/ActiveDeploy/updatingapps.html#adpipeline.
      #
      # Feel free to fork the code. After creating your fork, define the environment variable GIT_HOME to use the forked repositories with the
      # format https://github.com/${GIT_HOME}/update_service and https://github.com/${GIT_HOME}/activedeploy_common.
      #

      source ${EXT_DIR}/git_util.sh
      git_retry clone https://github.com/Osthanes/update_service.git activedeploy
      activedeploy/activedeploy_step_2.sh
hooks:
- enabled: true
  label: null
  ssl_enabled: false
  url: https://devops-api.ng.bluemix.net/v1/messaging/webhook/publish
